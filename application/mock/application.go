// Code generated by MockGen. DO NOT EDIT.
// Source: application/user.go

// Package mock_application is a generated GoMock package.
package mock_application

import (
	reflect "reflect"
	application "wwchacalww/go-cem304/application"
	dto "wwchacalww/go-cem304/application/dto"

	gomock "github.com/golang/mock/gomock"
)

// MockUserInterface is a mock of UserInterface interface.
type MockUserInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserInterfaceMockRecorder
}

// MockUserInterfaceMockRecorder is the mock recorder for MockUserInterface.
type MockUserInterfaceMockRecorder struct {
	mock *MockUserInterface
}

// NewMockUserInterface creates a new mock instance.
func NewMockUserInterface(ctrl *gomock.Controller) *MockUserInterface {
	mock := &MockUserInterface{ctrl: ctrl}
	mock.recorder = &MockUserInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserInterface) EXPECT() *MockUserInterfaceMockRecorder {
	return m.recorder
}

// Disable mocks base method.
func (m *MockUserInterface) Disable() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disable")
	ret0, _ := ret[0].(error)
	return ret0
}

// Disable indicates an expected call of Disable.
func (mr *MockUserInterfaceMockRecorder) Disable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable", reflect.TypeOf((*MockUserInterface)(nil).Disable))
}

// Enable mocks base method.
func (m *MockUserInterface) Enable() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enable")
	ret0, _ := ret[0].(error)
	return ret0
}

// Enable indicates an expected call of Enable.
func (mr *MockUserInterfaceMockRecorder) Enable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enable", reflect.TypeOf((*MockUserInterface)(nil).Enable))
}

// GetEmail mocks base method.
func (m *MockUserInterface) GetEmail() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmail")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetEmail indicates an expected call of GetEmail.
func (mr *MockUserInterfaceMockRecorder) GetEmail() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmail", reflect.TypeOf((*MockUserInterface)(nil).GetEmail))
}

// GetID mocks base method.
func (m *MockUserInterface) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockUserInterfaceMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockUserInterface)(nil).GetID))
}

// GetName mocks base method.
func (m *MockUserInterface) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockUserInterfaceMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockUserInterface)(nil).GetName))
}

// GetPassword mocks base method.
func (m *MockUserInterface) GetPassword() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassword")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPassword indicates an expected call of GetPassword.
func (mr *MockUserInterfaceMockRecorder) GetPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassword", reflect.TypeOf((*MockUserInterface)(nil).GetPassword))
}

// GetRole mocks base method.
func (m *MockUserInterface) GetRole() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRole indicates an expected call of GetRole.
func (mr *MockUserInterfaceMockRecorder) GetRole() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockUserInterface)(nil).GetRole))
}

// GetStatus mocks base method.
func (m *MockUserInterface) GetStatus() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockUserInterfaceMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockUserInterface)(nil).GetStatus))
}

// IsValid mocks base method.
func (m *MockUserInterface) IsValid() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValid")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsValid indicates an expected call of IsValid.
func (mr *MockUserInterfaceMockRecorder) IsValid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValid", reflect.TypeOf((*MockUserInterface)(nil).IsValid))
}

// MockUserServiceInterface is a mock of UserServiceInterface interface.
type MockUserServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceInterfaceMockRecorder
}

// MockUserServiceInterfaceMockRecorder is the mock recorder for MockUserServiceInterface.
type MockUserServiceInterfaceMockRecorder struct {
	mock *MockUserServiceInterface
}

// NewMockUserServiceInterface creates a new mock instance.
func NewMockUserServiceInterface(ctrl *gomock.Controller) *MockUserServiceInterface {
	mock := &MockUserServiceInterface{ctrl: ctrl}
	mock.recorder = &MockUserServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceInterface) EXPECT() *MockUserServiceInterfaceMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockUserServiceInterface) Authenticate(email, password string) (dto.AuthenticateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", email, password)
	ret0, _ := ret[0].(dto.AuthenticateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockUserServiceInterfaceMockRecorder) Authenticate(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockUserServiceInterface)(nil).Authenticate), email, password)
}

// CheckIsValidToken mocks base method.
func (m *MockUserServiceInterface) CheckIsValidToken(token, refresh_token string) (dto.AuthenticateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIsValidToken", token, refresh_token)
	ret0, _ := ret[0].(dto.AuthenticateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIsValidToken indicates an expected call of CheckIsValidToken.
func (mr *MockUserServiceInterfaceMockRecorder) CheckIsValidToken(token, refresh_token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIsValidToken", reflect.TypeOf((*MockUserServiceInterface)(nil).CheckIsValidToken), token, refresh_token)
}

// Create mocks base method.
func (m *MockUserServiceInterface) Create(input dto.UserInput) (application.UserInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", input)
	ret0, _ := ret[0].(application.UserInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserServiceInterfaceMockRecorder) Create(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserServiceInterface)(nil).Create), input)
}

// FindByEmail mocks base method.
func (m *MockUserServiceInterface) FindByEmail(email string) (application.UserInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", email)
	ret0, _ := ret[0].(application.UserInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserServiceInterfaceMockRecorder) FindByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserServiceInterface)(nil).FindByEmail), email)
}

// FindById mocks base method.
func (m *MockUserServiceInterface) FindById(id string) (application.UserInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(application.UserInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockUserServiceInterfaceMockRecorder) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockUserServiceInterface)(nil).FindById), id)
}

// List mocks base method.
func (m *MockUserServiceInterface) List() ([]application.UserInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]application.UserInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUserServiceInterfaceMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUserServiceInterface)(nil).List))
}

// MockUserPersistenceInterface is a mock of UserPersistenceInterface interface.
type MockUserPersistenceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserPersistenceInterfaceMockRecorder
}

// MockUserPersistenceInterfaceMockRecorder is the mock recorder for MockUserPersistenceInterface.
type MockUserPersistenceInterfaceMockRecorder struct {
	mock *MockUserPersistenceInterface
}

// NewMockUserPersistenceInterface creates a new mock instance.
func NewMockUserPersistenceInterface(ctrl *gomock.Controller) *MockUserPersistenceInterface {
	mock := &MockUserPersistenceInterface{ctrl: ctrl}
	mock.recorder = &MockUserPersistenceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserPersistenceInterface) EXPECT() *MockUserPersistenceInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserPersistenceInterface) Create(user application.UserInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserPersistenceInterfaceMockRecorder) Create(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserPersistenceInterface)(nil).Create), user)
}

// FindByEmail mocks base method.
func (m *MockUserPersistenceInterface) FindByEmail(email string) (application.UserInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", email)
	ret0, _ := ret[0].(application.UserInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserPersistenceInterfaceMockRecorder) FindByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserPersistenceInterface)(nil).FindByEmail), email)
}

// FindById mocks base method.
func (m *MockUserPersistenceInterface) FindById(id string) (application.UserInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(application.UserInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockUserPersistenceInterfaceMockRecorder) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockUserPersistenceInterface)(nil).FindById), id)
}

// List mocks base method.
func (m *MockUserPersistenceInterface) List() ([]application.UserInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]application.UserInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUserPersistenceInterfaceMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUserPersistenceInterface)(nil).List))
}
